/*
 * Copyright 2021 The Backstage Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { resolveSafeChildPath } from '@backstage/backend-plugin-api';
import { UrlReaderService } from '@backstage/backend-plugin-api';
import { JsonObject } from '@backstage/types';
import { ScmIntegrations } from '@backstage/integration';
import fs from 'fs-extra';
import path, { resolve as resolvePath } from 'path';
import { Writable } from 'stream';
import {
  createTemplateAction,
  fetchContents,
  executeShellCommand,
} from '@backstage/plugin-scaffolder-node'

export class CopierRunner {
  public async run({
    workspacePath,
    values,
    logStream,
    templateContentsDir,
  }: {
    workspacePath: string;
    values: JsonObject;
    logStream: Writable;
    imageName?: string;
    templateDir: string;
    templateContentsDir: string;
  }): Promise<void> {
    const intermediateDir = path.join(workspacePath, 'intermediate');
    await fs.ensureDir(intermediateDir);
    const resultDir = path.join(workspacePath, 'result');

    let copierValues: string[] = []
    console.log(values)
    let destValues = values['destination']
    delete values['destination']
    console.log("destValues:", destValues)
    console.log("values", values)
    let allValues  = Object.assign({}, destValues, values);
    console.log(allValues)
    for (let key in allValues) {
      let value = allValues[key];
      copierValues.push("--data")
      copierValues.push(key + "=" + value)
    }
    const projectDestination = intermediateDir+"/copier"
    await executeShellCommand({
      command: 'copier',
      args: ['copy', ...copierValues, templateContentsDir, projectDestination, '--trust'],
      logStream,
    });

    const [generated] = await fs.readdir(intermediateDir);
    console.log(generated)
    if (generated === undefined) {
      throw new Error('No data generated by copier');
    }

    await fs.move(path.join(intermediateDir, generated), resultDir);
  }
}

/**
 * Creates a `fetch:copier` Scaffolder action.
 *
 * @remarks
 *
 * See {@link https://copier.readthedocs.io/} and {@link https://backstage.io/docs/features/software-templates/writing-custom-actions}.
 * @param options - Templating configuration.
 * @public
 */
export function createFetchCopierAction(options: {
  reader: UrlReaderService;
  integrations: ScmIntegrations;
}) {
  const { reader, integrations } = options;

  return createTemplateAction<{
    url: string;
    targetPath?: string;
    values: JsonObject;
    imageName?: string;
  }>({
    id: 'fetch:copier',
    description:
      'Downloads a template from the given URL into the workspace, and runs copier on it.',
    schema: {
      input: {
        type: 'object',
        required: ['url'],
        properties: {
          url: {
            title: 'Fetch URL',
            description:
              'Relative path or absolute URL pointing to the directory tree to fetch',
            type: 'string',
          },
          targetPath: {
            title: 'Target Path',
            description:
              'Target path within the working directory to download the contents to.',
            type: 'string',
          },
          values: {
            title: 'Template Values',
            description: 'Values to pass on to copier for templating',
            type: 'object',
          },
          imageName: {
            title: 'Copier Docker image',
            description:
              "Specify a custom Docker image to run copier, to override the default: 'spotify/backstage-copier'. This can be used to execute copier with Template Extensions. Used only when a local copier is not found.",
            type: 'string',
          },
        },
      },
    },
    async handler(ctx) {
      ctx.logger.info('Fetching and then templating using copier');
      const workDir = await ctx.createTemporaryDirectory();
      const templateDir = resolvePath(workDir, 'template');
      const templateUrl = ctx.input.url;
      const templateContentsDir = resolvePath(
        templateDir,
        "copier",
      );
      const resultDir = resolvePath(workDir, 'result');

      await fetchContents({
        reader,
        integrations,
        baseUrl: ctx.templateInfo?.baseUrl,
        fetchUrl: ctx.input.url,
        outputPath: templateContentsDir,
      });

      const copier = new CopierRunner();
      const values = {
        ...ctx.input.values
      };

      await copier.run({
        workspacePath: workDir,
        logStream: ctx.logger,
        values: values,
        imageName: ctx.input.imageName,
        templateDir: templateDir,
        templateContentsDir: templateUrl,
      });

      const targetPath = ctx.input.targetPath ?? './';
      const outputPath = resolveSafeChildPath(ctx.workspacePath, targetPath);
      await fs.copy(resultDir, outputPath);
    },
  });
}
